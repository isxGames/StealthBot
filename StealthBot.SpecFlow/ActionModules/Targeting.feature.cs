// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthBot.SpecFlow.ActionModules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Targeting")]
    [NUnit.Framework.CategoryAttribute("Targeting")]
    public partial class TargetingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Targeting"};
        
#line 1 "Targeting.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ActionModules", "Targeting", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unlock unqueued targets 1 - Multiple targets to unlock")]
        public void UnlockUnqueuedTargets1_MultipleTargetsToUnlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unlock unqueued targets 1 - Multiple targets to unlock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table1.AddRow(new string[] {
                            "<scorditeEntity>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "true"});
                table1.AddRow(new string[] {
                            "<veldsparEntity>",
                            "00000002",
                            "Asteroid (Veldspar)",
                            "true"});
#line 7
testRunner.Given("I have entities", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
#line 11
testRunner.And("I have queued targets", ((string)(null)), table2, "And ");
#line hidden
#line 13
testRunner.When("I unlock unqueued targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
testRunner.Then("exactly \'1\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
testRunner.And("Unlock unqueued targets should return \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unlock unqueued targets 2 - No targets to unlock")]
        public void UnlockUnqueuedTargets2_NoTargetsToUnlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unlock unqueued targets 2 - No targets to unlock", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
#line 18
testRunner.Given("I have entities", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
#line 20
testRunner.And("I have queued targets", ((string)(null)), table4, "And ");
#line hidden
#line 22
testRunner.When("I unlock unqueued targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
testRunner.Then("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
testRunner.And("Unlock unqueued targets should return \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unlock unqueued targets 3 - Queued targets shouldn\'t be unlocked")]
        public void UnlockUnqueuedTargets3_QueuedTargetsShouldntBeUnlocked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unlock unqueued targets 3 - Queued targets shouldn\'t be unlocked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
                table5.AddRow(new string[] {
                            "<target>",
                            "00000001",
                            "Mine"});
#line 27
testRunner.Given("I have queued targets", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table6.AddRow(new string[] {
                            "<targetEntity>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "true"});
#line 30
testRunner.And("I have entities", ((string)(null)), table6, "And ");
#line hidden
#line 33
testRunner.When("I unlock unqueued targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
testRunner.Then("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
testRunner.And("Unlock unqueued targets should return \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Lock targets 1 - 1 entity, 1 queued, 1 type, max 1")]
        public void LockTargets1_1Entity1Queued1TypeMax1()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock targets 1 - 1 entity, 1 queued, 1 type, max 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
                table7.AddRow(new string[] {
                            "<target>",
                            "00000001",
                            "Mine"});
#line 38
testRunner.Given("I have queued targets", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table8.AddRow(new string[] {
                            "<targetEntity>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "false"});
#line 41
testRunner.And("I have entities", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 44
testRunner.And("I have modules", ((string)(null)), table9, "And ");
#line hidden
#line 46
testRunner.And("my ship can lock \'1\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
testRunner.When("I process queued targets \'2\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
testRunner.Then("target \'<targetEntity>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
testRunner.And("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Lock targets 2 - 2 entity, 2 queued, 1 type, max 2")]
        public void LockTargets2_2Entity2Queued1TypeMax2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock targets 2 - 2 entity, 2 queued, 1 type, max 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
                table10.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Mine"});
                table10.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Mine"});
#line 53
testRunner.Given("I have queued targets", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table11.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "false"});
                table11.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Asteroid (Veldspar)",
                            "false"});
#line 57
testRunner.And("I have entities", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 61
testRunner.And("I have modules", ((string)(null)), table12, "And ");
#line hidden
#line 63
testRunner.And("my ship can lock \'2\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
testRunner.When("I process queued targets \'3\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
testRunner.Then("target \'<targetEntity1>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
testRunner.And("target \'<targetEntity2>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
testRunner.And("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Lock targets 3 - 2 entity, 2 queued, 2 type, max 2")]
        public void LockTargets3_2Entity2Queued2TypeMax2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock targets 3 - 2 entity, 2 queued, 2 type, max 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type"});
                table13.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Mine"});
                table13.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Kill"});
#line 71
testRunner.Given("I have queued targets", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table14.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "false"});
                table14.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Serpentis Spy",
                            "false"});
#line 75
testRunner.And("I have entities", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 79
testRunner.And("I have modules", ((string)(null)), table15, "And ");
#line hidden
#line 81
testRunner.And("my ship can lock \'2\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
testRunner.When("I process queued targets \'3\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
testRunner.Then("target \'<targetEntity1>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
testRunner.And("target \'<targetEntity2>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
testRunner.And("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Lock targets 3 - 4 entity, 4 queued, 2 type, max 3 - Should use more combat slots" +
            " in a combat mode")]
        public void LockTargets3_4Entity4Queued2TypeMax3_ShouldUseMoreCombatSlotsInACombatMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock targets 3 - 4 entity, 4 queued, 2 type, max 3 - Should use more combat slots" +
                    " in a combat mode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type",
                            "Priority"});
                table16.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Mine",
                            "1"});
                table16.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Kill",
                            "0"});
                table16.AddRow(new string[] {
                            "<target3>",
                            "00000003",
                            "Kill",
                            "0"});
                table16.AddRow(new string[] {
                            "<target4>",
                            "00000004",
                            "Mine",
                            "1"});
#line 89
testRunner.Given("I have queued targets", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table17.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "false"});
                table17.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Serpentis Spy",
                            "false"});
                table17.AddRow(new string[] {
                            "<targetEntity3>",
                            "00000003",
                            "Serpentis Watchman",
                            "false"});
                table17.AddRow(new string[] {
                            "<targetEntity4>",
                            "00000004",
                            "Asteroid (Veldspar)",
                            "false"});
#line 95
testRunner.And("I have entities", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 101
testRunner.And("I have modules", ((string)(null)), table18, "And ");
#line hidden
#line 103
testRunner.And("whether or not I am in a non-combat mode is \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
testRunner.And("my ship can lock \'3\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
testRunner.When("I process queued targets \'5\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
testRunner.Then("target \'<targetEntity2>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
testRunner.And("target \'<targetEntity3>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
testRunner.And("exactly \'0\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change targets 1 - 5 entity, 5 queued, 2 type, max 4 - Should unlock an asteroid " +
            "in favor of an npc")]
        public void ChangeTargets1_5Entity5Queued2TypeMax4_ShouldUnlockAnAsteroidInFavorOfAnNpc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change targets 1 - 5 entity, 5 queued, 2 type, max 4 - Should unlock an asteroid " +
                    "in favor of an npc", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type",
                            "Priority"});
                table19.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Mine",
                            "1"});
                table19.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Mine",
                            "1"});
                table19.AddRow(new string[] {
                            "<target3>",
                            "00000003",
                            "Mine",
                            "1"});
                table19.AddRow(new string[] {
                            "<target4>",
                            "00000004",
                            "Mine",
                            "1"});
                table19.AddRow(new string[] {
                            "<target5>",
                            "00000005",
                            "Kill",
                            "0"});
                table19.AddRow(new string[] {
                            "<target6>",
                            "00000006",
                            "Kill",
                            "0"});
#line 112
testRunner.Given("I have queued targets", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table20.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "true"});
                table20.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Asteroid (Veldspar)",
                            "true"});
                table20.AddRow(new string[] {
                            "<targetEntity3>",
                            "00000003",
                            "Asteroid (Veldspar)",
                            "true"});
                table20.AddRow(new string[] {
                            "<targetEntity4>",
                            "00000004",
                            "Asteroid (Veldspar)",
                            "true"});
                table20.AddRow(new string[] {
                            "<targetEntity5>",
                            "00000005",
                            "Serpentis Spy",
                            "false"});
                table20.AddRow(new string[] {
                            "<targetEntity6>",
                            "00000006",
                            "Serpentis Watchman",
                            "false"});
#line 120
testRunner.And("I have entities", ((string)(null)), table20, "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 128
testRunner.And("I have modules", ((string)(null)), table21, "And ");
#line hidden
#line 130
testRunner.And("whether or not I am in a non-combat mode is \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
testRunner.And("my ship can lock \'4\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
testRunner.When("I process queued targets \'10\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
testRunner.Then("exactly \'2\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
testRunner.And("target \'<targetEntity5>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
testRunner.And("target \'<targetEntity6>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change targets 2 - 5 entity, 5 queued, 2 type, max 4 - Should unlock a kill targe" +
            "t in favor of an salvage target")]
        public void ChangeTargets2_5Entity5Queued2TypeMax4_ShouldUnlockAKillTargetInFavorOfAnSalvageTarget()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change targets 2 - 5 entity, 5 queued, 2 type, max 4 - Should unlock a kill targe" +
                    "t in favor of an salvage target", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type",
                            "Priority"});
                table22.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Kill",
                            "1"});
                table22.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Kill",
                            "1"});
                table22.AddRow(new string[] {
                            "<target3>",
                            "00000003",
                            "Kill",
                            "1"});
                table22.AddRow(new string[] {
                            "<target4>",
                            "00000004",
                            "Kill",
                            "1"});
                table22.AddRow(new string[] {
                            "<target5>",
                            "00000005",
                            "LootSalvage",
                            "2"});
                table22.AddRow(new string[] {
                            "<target6>",
                            "00000006",
                            "LootSalvage",
                            "2"});
#line 139
testRunner.Given("I have queued targets", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table23.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Serpentis Spy",
                            "true"});
                table23.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Serpentis Spy",
                            "true"});
                table23.AddRow(new string[] {
                            "<targetEntity3>",
                            "00000003",
                            "Serpentis Watchman",
                            "true"});
                table23.AddRow(new string[] {
                            "<targetEntity4>",
                            "00000004",
                            "Serpentis Watchman",
                            "true"});
                table23.AddRow(new string[] {
                            "<targetEntity5>",
                            "00000005",
                            "Wreck (Serpentis Watchman)",
                            "false"});
                table23.AddRow(new string[] {
                            "<targetEntity6>",
                            "00000006",
                            "Cargo Container",
                            "false"});
#line 147
testRunner.And("I have entities", ((string)(null)), table23, "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
#line 155
testRunner.And("I have modules", ((string)(null)), table24, "And ");
#line hidden
#line 157
testRunner.And("whether or not I am in a non-combat mode is \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
testRunner.And("my ship can lock \'4\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
testRunner.When("I process queued targets \'10\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
testRunner.Then("exactly \'2\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
testRunner.And("target \'<targetEntity5>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
testRunner.And("target \'<targetEntity6>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change targets 3 - 5 entity, 5 queued, 2 type, max 4 - Should")]
        public void ChangeTargets3_5Entity5Queued2TypeMax4_Should()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change targets 3 - 5 entity, 5 queued, 2 type, max 4 - Should", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "Id",
                            "Type",
                            "Priority"});
                table25.AddRow(new string[] {
                            "<target1>",
                            "00000001",
                            "Mine",
                            "1"});
                table25.AddRow(new string[] {
                            "<target2>",
                            "00000002",
                            "Mine",
                            "1"});
                table25.AddRow(new string[] {
                            "<target3>",
                            "00000003",
                            "Mine",
                            "1"});
                table25.AddRow(new string[] {
                            "<target4>",
                            "00000004",
                            "Mine",
                            "1"});
                table25.AddRow(new string[] {
                            "<target5>",
                            "00000005",
                            "Kill",
                            "0"});
                table25.AddRow(new string[] {
                            "<target6>",
                            "00000006",
                            "Kill",
                            "0"});
#line 166
testRunner.Given("I have queued targets", ((string)(null)), table25, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "Name",
                            "IsLockedTarget"});
                table26.AddRow(new string[] {
                            "<targetEntity1>",
                            "00000001",
                            "Asteroid (Scordite)",
                            "true"});
                table26.AddRow(new string[] {
                            "<targetEntity2>",
                            "00000002",
                            "Asteroid (Veldspar)",
                            "true"});
                table26.AddRow(new string[] {
                            "<targetEntity3>",
                            "00000003",
                            "Asteroid (Veldspar)",
                            "true"});
                table26.AddRow(new string[] {
                            "<targetEntity4>",
                            "00000004",
                            "Asteroid (Veldspar)",
                            "true"});
                table26.AddRow(new string[] {
                            "<targetEntity5>",
                            "00000005",
                            "Serpentis Spy",
                            "false"});
                table26.AddRow(new string[] {
                            "<targetEntity6>",
                            "00000006",
                            "Serpentis Watchman",
                            "false"});
#line 174
testRunner.And("I have entities", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "!this",
                            "ID",
                            "IsActive",
                            "TargetID"});
                table27.AddRow(new string[] {
                            "<module1>",
                            "00000001",
                            "true",
                            "00000001"});
                table27.AddRow(new string[] {
                            "<module2>",
                            "00000002",
                            "true",
                            "00000002"});
#line 182
testRunner.And("I have modules", ((string)(null)), table27, "And ");
#line hidden
#line 186
testRunner.And("whether or not I am in a non-combat mode is \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
testRunner.And("my ship can lock \'4\' targets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
testRunner.When("I process queued targets \'10\' times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
testRunner.Then("exactly \'2\' locked target(s) should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
testRunner.And("target \'<targetEntity5>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
testRunner.And("target \'<targetEntity6>\' should have been locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
testRunner.And("target \'<targetEntity1>\' should not have been unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
testRunner.And("target \'<targetEntity2>\' should not have been unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
