<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gherkin</name>
    </assembly>
    <members>
        <member name="P:Gherkin.GherkinLineSpan.Column">
            <summary>
            One-based line position
            </summary>
        </member>
        <member name="P:Gherkin.GherkinLineSpan.Text">
            <summary>
            Text part of the line
            </summary>
        </member>
        <member name="T:Gherkin.IGherkinLine">
            <summary>
            Represents a line of a Gherkin file
            </summary>
        </member>
        <member name="P:Gherkin.IGherkinLine.LineNumber">
            <summary>
            One-based line number
            </summary>
        </member>
        <member name="M:Gherkin.IGherkinLine.Detach">
            <summary>
            Called by the parser to indicate non-streamed reading (e.g. during look-ahead).
            </summary>
            <remarks>
            If the implementation depends on streamed reading behavior, with this method, it can clone itself, so that it will be detached.
            </remarks>
        </member>
        <member name="P:Gherkin.IGherkinLine.Indent">
            <summary>
            The number of whitespace characters in the beginning of the line.
            </summary>
        </member>
        <member name="M:Gherkin.IGherkinLine.IsEmpty">
            <summary>
            Gets if the line is empty or contains whitespaces only.
            </summary>
            <returns>true, if empty or contains whitespaces only; otherwise, false.</returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.StartsWith(System.String)">
            <summary>
            Determines whether the beginning of the line (wihtout whitespaces) matches a specified string.
            </summary>
            <param name="text">The string to compare. </param>
            <returns>true if text matches the beginning of this line; otherwise, false.</returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.StartsWithTitleKeyword(System.String)">
            <summary>
            Determines whether the beginning of the line (wihtout whitespaces) matches a specified title keyword (ie. a keyword followed by a ':' character).
            </summary>
            <param name="keyword">The keyword to compare. </param>
            <returns>true if keyword matches the beginning of this line and followed by a ':' character; otherwise, false.</returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.GetLineText(System.Int32)">
            <summary>
            Returns the line text
            </summary>
            <param name="indentToRemove">The maximum number of whitespace characters to remove. -1 removes all leading whitespaces.</param>
            <returns>The line text.</returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.GetRestTrimmed(System.Int32)">
            <summary>
            Returns the remaining part of the line.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.GetTags">
            <summary>
            Tries parsing the line as a tag list, and returns the tags wihtout the leading '@' characters.
            </summary>
            <returns>(position,text) pairs, position is 0-based index</returns>
        </member>
        <member name="M:Gherkin.IGherkinLine.GetTableCells">
            <summary>
            Tries parsing the line as table row and returns the trimmed cell values.
            </summary>
            <returns>(position,text) pairs, position is 0-based index</returns>
        </member>
        <member name="T:Gherkin.TokenScanner">
            <summary>
            The scanner reads a gherkin doc (typically read from a .feature file) and creates a token 
            for each line. 
            
            The tokens are passed to the parser, which outputs an AST (Abstract Syntax Tree).
            
            If the scanner sees a `#` language header, it will reconfigure itself dynamically to look 
            for  Gherkin keywords for the associated language. The keywords are defined in 
            gherkin-languages.json.
            </summary>
        </member>
    </members>
</doc>
