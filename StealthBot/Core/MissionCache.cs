using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using EVE.ISXEVE;
using LavishScriptAPI;
using System.Globalization;
using StealthBot.Core.Extensions;
using StealthBot.Core.Interfaces;

namespace StealthBot.Core
{
    // ReSharper disable ConvertToConstant.Local
    // ReSharper disable StringIndexOfIsCultureSpecific.2
    // ReSharper disable StringIndexOfIsCultureSpecific.1
    internal class MissionCache : ModuleBase, IMissionCache
    {
        // ReSharper disable InconsistentNaming
        private readonly string WindowName_Journal = "journal",
			Button_RequestMission = "UI/Agents/Dialogue/Buttons/RequestMission",
			Button_ViewMission = "UI/Agents/Dialogue/Buttons/ViewMission",
            //BUTTON_BUY_DATACORES = "UI/Agents/Dialogue/Buttons/BuyDatacores",
			Button_CompleteMission = "UI/Agents/Dialogue/Buttons/CompleteMission",
			Button_Accept = "UI/Agents/Dialogue/Buttons/AcceptMission",
			Button_Decline = "UI/Agents/Dialogue/Buttons/DeclineMission",
            //BUTTON_DELAY = "UI/Agents/Dialogue/Buttons/DeferMission",
            //BUTTON_QUIT_MISSION = "UI/Agents/Dialogue/Buttons/QuitMission",
			Tag_NoRoute = "(No route can be found with current autopilot settings!)",
			Tag_ImportantStorylineMission = "This is an important mission, which will have significant impact on your faction standings.";

        private readonly List<string> Tags_LowSec = new List<string>
            {
                "(The route generated by current autopilot settings contains low security systems!)",
                "(Low Sec Warning!)"
            };

        #region Bookmark Tags
        private readonly string Tag_ObjectiveSource = "objective.source",	//Marks a mission bookmark as being the "source" bookmark if an item is involved
            Tag_ObjectiveDestination = "objective.destination",	            //Marks a mission bookmark as being the "destination" dropoff bookmark
            Tag_Objective = "objective",							        //Marks a mission bookmark as being the objective of a mission
            Tag_Dungeon = "dungeon",								        //Marks a mission bookmark as being the deadspace location for the encounter
            //Tag_Station = "Station",								        //Makrs a mission bookmark as being a station
            Tag_AgentHomeBase = "agenthomebase";					        //Marks mission bookmark as being the turn-in point for the mission
        #endregion

        #region Mission Types
        private readonly string Type_Courier = "Courier",	//marks a mission as being a courier mission
            Type_Mining = "Mining",							//marks a mission as being a mining mission
            Type_Trade = "Trade",							//Marks a mission as being a trade mission
            Type_Encounter = "Encounter",					//Marks a mission as being an encounter mission
            Type_ChainCourier = "Storyline - Courier",		//Marks a mission as being a courier mission and part of a storyline chai
            Type_Storyline = "Storyline";					//Marks a mission as being a storyline mission or part of a storyline chain
        #endregion

		private readonly int Delay_LongLoad = 2;
        // ReSharper restore InconsistentNaming

        private UpdateCacheStates _updateCacheState = UpdateCacheStates.Idle;
        private CheckMissionStates _checkMissionState = CheckMissionStates.Idle;
        private GetMissionStates _getMissionState = GetMissionStates.Idle;
        private int _lastMissionIndex;
        private bool _missionCheckFailed, _declineFailed;
        private Int64 _lastMissionExpires;

        private readonly string _configDirectory;
        private readonly string _missionDbFileSuffix = " Missions.bin";

        private string _missionDbFileName = string.Empty;
        private string _missionDbFilePath = string.Empty;

        private readonly List<CachedMission> _cachedMissions = new List<CachedMission>();
        public ReadOnlyCollection<CachedMission> CachedMissions
        {
            get { return _cachedMissions.AsReadOnly(); }
        }

        private readonly Dictionary<CachedMission, List<BookMark>> _missionBookMarksByMission = new Dictionary<CachedMission, List<BookMark>>();
        private readonly Dictionary<CachedMission, BookMark> _missionStartBookMarkByMission = new Dictionary<CachedMission, BookMark>();
        private readonly Dictionary<CachedMission, BookMark> _missionEndBookMarkByMission = new Dictionary<CachedMission, BookMark>();

        private readonly FileReadCallback<CachedMission> _loadCallback;
        private readonly FileWriteCallback _writeCallback;

        private readonly IIsxeveProvider _isxeveProvider;
        private readonly IEveWindowProvider _eveWindowProvider;

        internal MissionCache(IIsxeveProvider isxeveProvider, IEveWindowProvider eveWindowProvider)
        {
            _isxeveProvider = isxeveProvider;
            _eveWindowProvider = eveWindowProvider;

            _loadCallback = FileLoadCallback;
            _writeCallback = FileWriteCallback;
            ModuleName = "MissionCache";

            _configDirectory = StealthBot.ConfigDirectory;
        }

        public override void InFrameCleanup()
        {
            _missionBookMarksByMission.Clear();
            _missionEndBookMarkByMission.Clear();
            _missionStartBookMarkByMission.Clear();
        }

        public override bool OutOfFrameCleanup()
        {
            var methodName = "OutOfFrameCleanup";
			LogTrace(methodName);

            //If not already cleaned up...
            if (!IsCleanedUpOutOfFrame)
            {
                //If not cleaning up...
                if (!_isCleaningUp)
                {
                    //Only save if we've got agents to save
                    if (_cachedMissions.Any())
                    {
                        _isCleaningUp = true;
                        SaveMissionCache(true);
                    }
                    else
                    {
                        IsCleanedUpOutOfFrame = true;
                    }
                }
            }

            return IsCleanedUpOutOfFrame;
        }

        private void SaveMissionCache(bool sendCallback)
        {
            var methodName = "SaveMissionCache";
        	LogTrace(methodName);

            _missionDbFileName = string.Format("{0}{1}", StealthBot.MeCache.Name, _missionDbFileSuffix);
            _missionDbFilePath = string.Format("{0}\\{1}", _configDirectory, _missionDbFileName);

            StealthBot.FileManager.QueueOverwriteSerialize(_missionDbFilePath, new List<CachedMission>(_cachedMissions), sendCallback ? _writeCallback : null);
        }

        private void FileWriteCallback()
        {
            IsCleanedUpOutOfFrame = true;
        }

        public override bool Initialize()
        {
            var methodName = "Initialize";
        	LogTrace(methodName);

			IsCleanedUpOutOfFrame = false;
            if (!IsInitialized)
            {
                //If we're not already initializing...
                if (!_isInitializing)
                {
                    //State that we are and start the agent cache load
                    _isInitializing = true;
                    LoadMissionCache();
                }
            }

            //Return whether or not we're initialized
            return IsInitialized;
        }

        private void LoadMissionCache()
        {
            var methodName = "LoadMissionCache";
        	LogTrace(methodName);

            _missionDbFileName = string.Format("{0}{1}", StealthBot.MeCache.Name, _missionDbFileSuffix);
            _missionDbFilePath = string.Format("{0}\\{1}", _configDirectory, _missionDbFileName);

            StealthBot.FileManager.QueueDeserialize(_missionDbFilePath, _loadCallback);
        }

        private void FileLoadCallback(List<CachedMission> results)
        {
            lock (_cachedMissions)
            {
                _cachedMissions.Clear();
                _cachedMissions.AddRange(results);
            }

            IsInitialized = true;
        }

        public bool UpdateCache()
        {
            return UpdateCache(0, false);
        }

        public bool UpdateCache(bool fastUpdate)
        {
            return UpdateCache(0, fastUpdate);
        }

        public bool UpdateCache(int agentId)
        {
            return UpdateCache(agentId, false);
        }

        public bool UpdateCache(int agentId, bool fastUpdate)
        {
            var methodName = "UpdateCache";
        	LogTrace(methodName, "AgentID: {0}, FastUpdate: {1}", agentId, fastUpdate);

            switch (_updateCacheState)
            {
                case UpdateCacheStates.Idle:
                    goto case UpdateCacheStates.OpenJournal;
                case UpdateCacheStates.OpenJournal:
                    //Open the journal.
                    //See if the journal is already open.
                    using (var journalWindow = _eveWindowProvider.GetWindowByName(WindowName_Journal))
					{
						if (LavishScriptObject.IsNullOrInvalid(journalWindow))
						{
							OpenJournalWindow();
						}
						else
						{
							//If we have no agentmissions, cache is up to date.
							if (StealthBot.MeCache.AgentMissions.Count == 0)
							{
								LogMessage(methodName, LogSeverityTypes.Debug, "Journal open; no missions to cache.");
								_updateCacheState = UpdateCacheStates.Idle;
                                _cachedMissions.Clear();
								return true;
							}

							LogMessage(methodName, LogSeverityTypes.Debug, "Journal open; going to CheckMissions state.");
							_updateCacheState = UpdateCacheStates.CheckMissions;
							goto case UpdateCacheStates.CheckMissions;
						}
					}
            		break;
                case UpdateCacheStates.CheckMissions:
                    if (CheckMissions(agentId, fastUpdate))
                    {
                        if (agentId != 0)
                        {
                            _updateCacheState = UpdateCacheStates.Idle;
                            return true;
                        }

                    	_updateCacheState = UpdateCacheStates.Cleanup;
                    	goto case UpdateCacheStates.Cleanup;
                    }
                    break;
                case UpdateCacheStates.Cleanup:
                    //Close the journal EVEWindow
					using (var journalWindow = _eveWindowProvider.GetWindowByName(WindowName_Journal))
					{
						journalWindow.Close();
					}

            		LogMessage(methodName, LogSeverityTypes.Debug, "Closing journal.");
                    //Reset the state
                    _updateCacheState = UpdateCacheStates.Idle;
					//Save mission cache so we don't have to re-populate after a crash.
					SaveMissionCache(false);
                    return true;
            }
            return false;
        }

        private bool CheckMissions(int agentId, bool fastUpdate)
        {
            var methodName = "CheckMissions";
        	LogTrace(methodName, "AgentID: {0}, Fast Update: {1}", agentId, fastUpdate);

            //AgentMission reference so I don't need to keep accessing from the index
            AgentMission currentAgentMission;
            //Set it for AgentID if necessary
            if (agentId > 0)
            {
                currentAgentMission = StealthBot.MeCache.AgentMissions.FirstOrDefault(agentMission => agentMission.AgentID == agentId);

            	//handle "no mission found"
                if (currentAgentMission == null)
                {
					LogMessage(methodName, LogSeverityTypes.Standard, "Could not find agentmission for agent {0}.", agentId);
					//If there's no agent mission, make sure any cached missions are nuked
					ClearMissionFromAgent(agentId);
                    return true;
                }
            }
            else
            {
            	//if fast updating, make sure I need to
            	if (fastUpdate)
            	{
            		//First iterate CachedMissions against AgentMissions to check for any
            		//CachedMissions not matched by an AgenetMission to prune.
                    for (var cmIdx = 0; cmIdx < _cachedMissions.Count; cmIdx++)
            		{
                        var cachedMission = _cachedMissions[cmIdx];

            			var matched = false;
            			foreach (var agentMission in StealthBot.MeCache.AgentMissions.Where(agentMission => agentMission.AgentID == cachedMission.AgentId))
            			{
            				//set the flag
            				matched = true;

            				//If the names of the missions don't match but agent does, remove the cached version
            				if (agentMission.Name != cachedMission.Name)
            				{
                                LogMessage(methodName, LogSeverityTypes.Debug, "Removing CachedMission with name \"{0}\" for agent ID {1} because it doesn't match that agent's last mission's name of \"{2}\".",
                                    cachedMission.Name, agentMission.AgentID, agentMission.Name);
                                _cachedMissions.RemoveAt(cmIdx);
            					cmIdx--;
            				}
            				break;
            			}

            			//If we didn't find a matching agentMission remove the cachedmission
            			if (matched)
							continue;

                        LogMessage(methodName, LogSeverityTypes.Debug, "Removing CachedMission with name \"{0}\" for agent ID {1} because we couldn't find an AgentMission for this agent.",
                            cachedMission.Name, cachedMission.AgentId);
                        _cachedMissions.RemoveAt(cmIdx);
            			cmIdx--;
            		}

            		//Second, iterate AgentMissions against CachedMissions looking for any
            		//AgentMissions not in the cache.

            		var allMatched = true;

                    for (var amIdx = 0; amIdx < StealthBot.MeCache.AgentMissions.Count; amIdx++)
            		{
                        var agentMission = StealthBot.MeCache.AgentMissions[amIdx];

                        var cachedMission = _cachedMissions.FirstOrDefault(cm => agentMission.AgentID == cm.AgentId && agentMission.Name == cm.Name);

                        if (cachedMission != null)
                        {
                            LogMessage(methodName, LogSeverityTypes.Debug, "Updating CachedMission state from AgentMission for mission \"{0}\" for agent ID {1}.",
                                agentMission.Name, agentMission.AgentID);
                            cachedMission.State = agentMission.State;
                            continue;
                        }

            			//If we coudln't find a match for this agent mission, set the flag,
            			//set lastIndex, and return.
            			allMatched = false;
            			_lastMissionIndex = amIdx;
            			break;
            		}

            		if (allMatched)
            			return true;
            	}

                if (StealthBot.MeCache.AgentMissions.Count > _lastMissionIndex)
                {
                    currentAgentMission = StealthBot.MeCache.AgentMissions[_lastMissionIndex];
                }
                else
                    return true;
            }

        	//CachedAgent for agent acces
            var cachedAgent = StealthBot.AgentCache.GetCachedAgent(currentAgentMission.AgentID);

            switch (_checkMissionState)
            {
                case CheckMissionStates.Idle:
                    _checkMissionState = CheckMissionStates.OpenAgentConversation;
                    goto case CheckMissionStates.OpenAgentConversation;
                case CheckMissionStates.OpenAgentConversation:
                    //Get an EVEWindow for the agent conversation
					using (var agentConversationWindow = StealthBot.AgentCache.GetAgentConversationWindow(currentAgentMission.AgentID))
					{
                        var agent = StealthBot.AgentCache.GetAgent(cachedAgent);
						//If teh window isn't open...
						if (LavishScriptObject.IsNullOrInvalid(agentConversationWindow))
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Starting conversation with agent \"{0}\" ({1}).",
							           agent.Name, agent.ID);

							agent.StartConversation();
							StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
						}
						else
						{
							//make sure we don't need to ViewMission
                            var dialogStrings = agent.GetDialogResponses();
							foreach (var dialogString in dialogStrings.Where(dialogString => dialogString.Text.Contains(Button_ViewMission)))
							{
								//Damn, we do. Say it.
								SayDialogStringToAgent(dialogString, cachedAgent);
								_checkMissionState = CheckMissionStates.OpenMission;
								return false;
							}

							LogMessage(methodName, LogSeverityTypes.Debug, "Agent convo open; going to OpenMission state.");
							_checkMissionState = CheckMissionStates.OpenMission;
							goto case CheckMissionStates.OpenMission;
						}
					}
            		break;
                case CheckMissionStates.OpenMission:
                    using (var missionWindow = GetAgentMissionWindow(cachedAgent))
                    {
                        if (LavishScriptObject.IsNullOrInvalid(missionWindow))
                        {
                            //Open its details
                            LogMessage(methodName, LogSeverityTypes.Debug, "Opening mission \"{0}\" details.", currentAgentMission.Name);
                            currentAgentMission.GetDetails();
                            //Delay next pulse a bit to compensate for lag
                            StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
                        }
                        else
                        {
                            LogMessage(methodName, LogSeverityTypes.Debug, "Mission window open; going to ParseMission state.");
                            _checkMissionState = CheckMissionStates.ParseMission;
                            goto case CheckMissionStates.ParseMission;
                        }
                    }
                    break;
                case CheckMissionStates.ParseMission:
                    //Parse this mission and add it to the cache
                    var mission = ParseMissionDetails(currentAgentMission, cachedAgent);

                    var missionUpdated = false;
                    for (var idx = 0; idx < _cachedMissions.Count; idx++)
                    {
                        if (_cachedMissions[idx].AgentId != mission.AgentId) 
							continue;

                    	missionUpdated = true;
                        _cachedMissions[idx] = mission;
                    	break;
                    }

                    if (!missionUpdated)
                    {
                        _cachedMissions.Add(mission);
                    }

                    //Cleanup.
                    _checkMissionState = CheckMissionStates.Cleanup;
                    goto case CheckMissionStates.Cleanup;
                case CheckMissionStates.Cleanup:
                    //IF we're only checking one, don't cleanup. Otherwise do.
                    _checkMissionState = CheckMissionStates.Idle;
                    if (agentId > 0)
                    {
                        //Single agent, we're done
                        return true;
                    }

					using (var missionWindow = GetAgentMissionWindow(cachedAgent))
					{
						if (!LavishScriptObject.IsNullOrInvalid(missionWindow))
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Closing mission details window \"{0}\".", missionWindow.Caption);
							missionWindow.Close();
						}
					}

                    using (var agentConversationWindow = StealthBot.AgentCache.GetAgentConversationWindow(cachedAgent.Id))
					{
						if (!LavishScriptObject.IsNullOrInvalid(agentConversationWindow))
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Closing agent conversation window \"{0}\".", agentConversationWindow.Caption);
							agentConversationWindow.Close();
						}
					}

            		//If I have more to check, update the index
                    if (StealthBot.MeCache.AgentMissions.Count > _lastMissionIndex + 1)
            		{
            		    if (fastUpdate)
            		        return false;

            		    _lastMissionIndex++;
            		}
            		else
            		{
            			//Otherwise reset, we're done
            			_lastMissionIndex = 0;
            			return true;
            		}
            		break;
            }
            return false;
        }

        public ConversationStateResults GetMissionFromAgent(int agentId)
        {
            var methodName = "GetMissionFromAgent";
			LogTrace(methodName, "AgentID: {0}", agentId);

            if (agentId <= 0)
                throw new ArgumentException("AgentId must be greater than 0.", "agentId");

            var cachedAgent = StealthBot.AgentCache.GetCachedAgent(agentId);
            var agent = StealthBot.AgentCache.GetAgent(cachedAgent);
            var dialogStrings = agent.GetDialogResponses();

            switch (_getMissionState)
            {
                case GetMissionStates.Idle:
                    _missionCheckFailed = false;
                    _getMissionState = GetMissionStates.OpenJournal;
                    goto case GetMissionStates.OpenJournal;
                case GetMissionStates.OpenJournal:
                    //Get the window ref, see if it's invalid.
                    using (var journalWindow = _eveWindowProvider.GetWindowByName(WindowName_Journal))
                    {
						if (LavishScriptObject.IsNullOrInvalid(journalWindow))
						{
							//It was, open it.
							OpenJournalWindow();
						}
						else
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Journal open; going to OpenAgentConversation state.");
							_getMissionState = GetMissionStates.OpenAgentConversation;
							goto case GetMissionStates.OpenAgentConversation;
						}
					}
                    break;
                case GetMissionStates.OpenAgentConversation:
                    //Start conversation with the agent if necessary
					using (var agentConversationWindow = StealthBot.AgentCache.GetAgentConversationWindow(cachedAgent.Id))
					{
						if (LavishScriptObject.IsNullOrInvalid(agentConversationWindow))
						{
							StartAgentConversation(cachedAgent);
						}
						else
						{
							//If the window itself was valid but HTML is null, kill the window.
							/*if (string.IsNullOrEmpty(agentConversationWindow.HTML))
							{
								Core.StealthBot.Logging.LogMessage(ObjectName, new LogEventArgs(LogSeverityTypes.Standard,
									methodName, "Agent window is invalid, closing."));
								agentConversationWindow.Close();
								return ConversationStateResults.Incomplete;
							}*/

							//"View Mission" if necessary
                            dialogStrings = agent.GetDialogResponses();
							foreach (var dialogString in
								dialogStrings.Where(
									dialogString =>
									dialogString.Text.Contains(Button_ViewMission) || dialogString.Text.Contains(Button_RequestMission)))
							{
								SayDialogStringToAgent(dialogString, cachedAgent);
								return ConversationStateResults.Incomplete;
							}

							LogMessage(methodName, LogSeverityTypes.Debug, "Agent conversation open, going to UpdateCachedMission state.");
							_getMissionState = GetMissionStates.UpdateCachedMission;
							goto case GetMissionStates.UpdateCachedMission;
						}
					}
            		break;
                case GetMissionStates.UpdateCachedMission:
                    if (UpdateCache(cachedAgent.Id))
                    {
                        var cachedMission = GetCachedMissionForAgentId(cachedAgent.Id);

						//if cachedMission is null, we failed to accept the mission.
						if (cachedMission == null)
						{
							LogMessage(methodName, LogSeverityTypes.Standard,
								"Unable to find a cached mission from this agent. This usually means accepting the mission failed due to a dialog box. Manually accept the mission, click the \"do not show this again\" check box on the dialog, and resume StealthBot.");
							StealthBot.Instance.IsEnabled = false;
							return ConversationStateResults.Incomplete;
						}

                        if (IsMissionAcceptible(cachedMission))
                        {
							LogMessage(methodName, LogSeverityTypes.Debug, "Agent's mission acceptible, going to AcceptMission state.");
                            _getMissionState = GetMissionStates.AcceptMission;
                            goto case GetMissionStates.AcceptMission;
                        }

                    	_missionCheckFailed = true;
                        if (StealthBot.Config.MissionConfig.IgnoreMissionDeclineTimer || DateTime.Now.CompareTo(cachedAgent.NextMissionDeclinable) >= 0)
                    	{
                    		_lastMissionExpires = cachedMission.ExpirationTime;
							LogMessage(methodName, LogSeverityTypes.Debug, "Agent's mission not acceptible but declinable, going to decline state.");
                    		_getMissionState = GetMissionStates.DeclineMission;
                    		goto case GetMissionStates.DeclineMission;
                    	}

						LogMessage(methodName, LogSeverityTypes.Debug, "Agent's mission not acceptible or declinable, going to cleanup state.");
                    	_getMissionState = GetMissionStates.Cleanup;
                    	goto case GetMissionStates.Cleanup;
                    }
                    break;
                case GetMissionStates.AcceptMission:
                    var acceptStringFound = false;
                    foreach (var dialogString in
                    	dialogStrings.Where(dialogString => dialogString.Text.Contains(Button_Accept)))
                    {
                    	acceptStringFound = true;
                    	SayDialogStringToAgent(dialogString, cachedAgent);
                    	var cachedMission = GetCachedMissionForAgentId(cachedAgent.Id);
                    	//Update the mission's state to Accepted
                    	cachedMission.State = (int)MissionStates.Accepted;
                    	_getMissionState = GetMissionStates.Cleanup;
                    	break;
                    }

                    if (!acceptStringFound)
                    {
						LogMessage(methodName, LogSeverityTypes.Standard, "Accept Mission dialog string not found, assuming mission already accepted.");
                        _getMissionState = GetMissionStates.Cleanup;
                    }
                    break;
                case GetMissionStates.DeclineMission:
                    foreach (var dialogString in
                    	dialogStrings.Where(dialogString => dialogString.Text.Contains(Button_Decline)))
                    {
                    	cachedAgent.NextMissionDeclinable = DateTime.Now.AddHours(4);
                    	//Go ahead and save the agent cache with updated decline timer now,
                    	//because if we crash it won't save at exit, and we need this to save.
                    	StealthBot.AgentCache.SaveAgentCache();
                    	SayDialogStringToAgent(dialogString, cachedAgent);
                    	_getMissionState = GetMissionStates.VerifyMission;
                    	break;
                    }
                    break;
                case GetMissionStates.VerifyMission:
                    if (UpdateCache(cachedAgent.Id))
                    {
                        var agentMission = GetAgentMissionFromAgent(cachedAgent.Id);
                        if (!LavishScriptObject.IsNullOrInvalid(agentMission) && _lastMissionExpires == agentMission.ExpirationTime.AsInt64)
                        {
                        	LogMessage(methodName, LogSeverityTypes.Debug, "Declining mission failed.");
                            _declineFailed = true;
                        }
                        else
                        {
                            ClearMissionFromAgent(cachedAgent.Id);
							LogMessage(methodName, LogSeverityTypes.Debug, "Declining mission succeeded.");
                        }
                        _getMissionState = GetMissionStates.Cleanup;
                        goto case GetMissionStates.Cleanup;
                    }
                    break;
                case GetMissionStates.Cleanup:
					using (var agentConversationWindow = StealthBot.AgentCache.GetAgentConversationWindow(cachedAgent.Id))
					{
						if (!LavishScriptObject.IsNullOrInvalid(agentConversationWindow))
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Closing agent conversation window \"{0}\".",
							           agentConversationWindow.Caption);
							agentConversationWindow.Close();
						}
					}

                    using (var journalWindow = _eveWindowProvider.GetWindowByName(WindowName_Journal))
					{
						if (!LavishScriptObject.IsNullOrInvalid(journalWindow))
						{
							LogMessage(methodName, LogSeverityTypes.Debug, "Closing journal window.");
							journalWindow.Close();
						}
					}

            		_getMissionState = GetMissionStates.Idle;
                    if (_missionCheckFailed)
                    {
                        _missionCheckFailed = false;
                        if (_declineFailed)
                        {
                            _declineFailed = false;
                            return ConversationStateResults.DeclineFailed;
                        }
                    	return ConversationStateResults.MissionNotAccepted;
                    }
                    return ConversationStateResults.MissionAccepted;
            }
            return ConversationStateResults.Incomplete;
        }

        public bool TurnInMission(CachedAgent cachedAgent)
        {
            var methodName = "TurnInMission";
            LogTrace(methodName, "AgentID: {0}", cachedAgent.Id);

			//If the journal isn't open, open it and return
            using (var journalWindow = _eveWindowProvider.GetWindowByName(WindowName_Journal))
			{
				if (LavishScriptObject.IsNullOrInvalid(journalWindow))
				{
					OpenJournalWindow();
					StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
					return false;
				}
			}

            var agent = StealthBot.AgentCache.GetAgent(cachedAgent);

			using (var agentConversationWindow = StealthBot.AgentCache.GetAgentConversationWindow(cachedAgent.Id))
			{
				if (LavishScriptObject.IsNullOrInvalid(agentConversationWindow))
				{
					StartAgentConversation(cachedAgent);
				}
				else
				{
					//Ok, conversation up. Find the correct dialogstring and say it to the agent.
					//Get a list of DialogStrings
                    var dialogStrings = agent.GetDialogResponses();

					//If DialogResponses is null we have a bad agent window
					if (dialogStrings == null)
					{
						LogMessage(methodName, LogSeverityTypes.Standard, "Closing malformed conversation window \"{0}\".",
						           agentConversationWindow.Caption);
						agentConversationWindow.Close();
						return false;
					}

					//Compensate for locator agents
					foreach (var dialogString in
						dialogStrings.Where(dialogString => dialogString.Text.Contains(Button_ViewMission)))
					{
						SayDialogStringToAgent(dialogString, cachedAgent);
						return false;
					}

					foreach (var dialogString in
						dialogStrings.Where(dialogString => dialogString.Text.Contains(Button_CompleteMission)))
					{
						SayDialogStringToAgent(dialogString, cachedAgent);
						//Invalidate the currentMission
						ClearMissionFromAgent(cachedAgent.Id);
						//Also close the agent convo!
						agentConversationWindow.Close();
						return true;
					}
				}
			}
        	return false;
        }

        #region Agent interaction helper functions
        private void OpenJournalWindow()
        {
            var methodName = "OpenJournalWindow";
        	LogTrace(methodName);

            _isxeveProvider.Eve.Execute(ExecuteCommand.OpenJournal);
			LogMessage(methodName, LogSeverityTypes.Debug, "Opening the journal.");

            //Delay next pulse a bit to compensate for any lag.
			StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
        }

        private void StartAgentConversation(CachedAgent cachedAgent)
        {
            var methodName = "StartAgentConversation";
			LogTrace(methodName, "CachedAgent: {0}", cachedAgent.Name);

			var agent = StealthBot.AgentCache.GetAgent(cachedAgent);

			LogMessage(methodName, LogSeverityTypes.Standard, "Starting conversation with agent \"{0}\" ({1}).",
				agent.Name, agent.ID);
            agent.StartConversation();
            //Delay next pulse a bit to compensate for any lag.
			StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
        }

        private void SayDialogStringToAgent(DialogString dialogString, CachedAgent cachedAgent)
        {
            var methodName = "SayDialogStringToAgent";
			LogTrace(methodName, "DialogString: {0}, CachedAgent: {1}", dialogString.Text, cachedAgent.Name);

			LogMessage(methodName, LogSeverityTypes.Debug, "Saying \"{0}\" to agent \"{1}\".", dialogString.Text, cachedAgent.Name);
            dialogString.Say(cachedAgent.Id);
			StealthBot.ModuleManager.DelayPulseByHighestTime(Delay_LongLoad);
        }

        private EVEWindow GetAgentMissionWindow(CachedAgent agent)
        {
            var methodName = "GetAgentMissionWindow";
			LogTrace(methodName, "AgentMission: {0}", agent.Name);

            var missionWindowCaptionString = string.Format("Mission journal - {0}", agent.Name);

            var agentMissionWindow = _eveWindowProvider.GetWindowByCaption(missionWindowCaptionString);
            return agentMissionWindow;
        }
        #endregion

        #region Misison parsing helper functions
        private string GetMissionDetails(AgentMission agentMission, CachedAgent agent)
        {
            var methodName = "GetMissionDetails";
			LogTrace(methodName, "AgentMission: {0}, Agent: {1}", agentMission.Name, agent.Name);

            //Get the matching EVEWindow
			using (var eveWindow = GetAgentMissionWindow(agent))
			{
				//Get the detail string. This will be the window's HTML value.
				var detailsString = eveWindow.HTML;
				LogMessage(methodName, LogSeverityTypes.Debug, "Window HTML Length: {0}, Mission Details length: {1}",
				           eveWindow.HTML.Length, detailsString.Length);

				//Log the mission to file for debugging purposes.
				var expiration = string.Format("NEVER {0}", DateTime.Now.ToFileTime());
				if (agentMission.Expires && !LavishScriptObject.IsNullOrInvalid(agentMission.ExpirationTime))
				{
// ReSharper disable SpecifyACultureInStringConversionExplicitly
					expiration = agentMission.ExpirationTime.AsInt64.ToString();
// ReSharper restore SpecifyACultureInStringConversionExplicitly
				}

				//RemoveBookmarkAndCacheEntry any invalid characters
				StealthBot.Logging.LogMission(detailsString, expiration, agentMission.Name);

				//Close the EVEWindow
				LogMessage(methodName, LogSeverityTypes.Debug, "Closing details window \"{0}\".",
				           eveWindow.Caption);
				eveWindow.Close();
				return detailsString;
			}
        }

        private CachedMission ParseMissionDetails(AgentMission agentMission, CachedAgent agent)
        {
            var methodName = "ParseMissionDetails";
			LogTrace(methodName, "AgentMission: {0}, Agent: {1}", agentMission.Name, agent.Name);

            var detailsString = GetMissionDetails(agentMission, agent);

            //Temporary cachedMission
            var cachedMission = new CachedMission();

            //Search for the corpLogo tag and typeIcon tag
            //<img src="corplogo:1000061"
            //var corpLogoTag = "<img src=\"corplogo:";
            var typeIconTag = "<img src=\"typeicon:";
			var factionLogoTag = "<img src=\"factionlogo:";

            //Try to find the faction for this mission
            //if (detailsString.Contains(corpLogoTag))
			if (detailsString.Contains(factionLogoTag))
            {
                cachedMission.FactionId = GetIdFromDetailsByTag(detailsString, factionLogoTag);
            }
            else
            {
				LogMessage(methodName, LogSeverityTypes.Debug, "Did not find the factionlogo tag. Drone mission?");
            }

            //Try to find the TypeID for the item of this mission, if it exists
            if (detailsString.Contains(typeIconTag))
            {
                cachedMission.TypeId = GetIdFromDetailsByTag(detailsString, typeIconTag);
            }
            else
            {
				LogMessage(methodName, LogSeverityTypes.Debug, "Did not find the typeicon tag. No cargo?");
            }

            //Parse the volume for carrier stuff
            if (detailsString.Contains("msup3"))
            {
                cachedMission.CargoVolume = GetItemVolumeFromDetails(detailsString);
            }
            else
            {
				LogMessage(methodName, LogSeverityTypes.Debug, "Did not find msup3. No cargo volume?");
            }

            //Check lowsec status
            if (IsMissionInDangerousSpace(detailsString))
            {
                cachedMission.IsLowSecurity = true;
            }

            cachedMission.HaveRoute = !detailsString.Contains(Tag_NoRoute);

            //Check the state of the mission
            cachedMission.State = agentMission.State;
            //Also cache the Type of the mission
            cachedMission.Type = agentMission.Type;
			//If the details contain the "important storyline" text, prefix the type
			if (detailsString.Contains(Tag_ImportantStorylineMission))
			{
				cachedMission.Type = String.Format("Important {0}", cachedMission.Type);
			}

			//If it's a mining mission, set the mining subtype
			if (cachedMission.Type.Contains("Mining"))
			{
				switch (cachedMission.TypeId)
				{
					case (int)TypeIDs.Banidine:
					case (int)TypeIDs.Augumene:
					case (int)TypeIDs.Mercium:
					case (int)TypeIDs.Lyavite:
					case (int)TypeIDs.Pithix:
					case (int)TypeIDs.Green_Arisite:
					case (int)TypeIDs.Oeryl:
					case (int)TypeIDs.Geodite:
					case (int)TypeIDs.Polygypsum:
					case (int)TypeIDs.Zuthrine:
						cachedMission.MiningMissionType = MiningMissionTypes.Ore;
						break;
					case (int)TypeIDs.Azure_Ice:
					case (int)TypeIDs.Crystalline_Icicle:
						cachedMission.MiningMissionType = MiningMissionTypes.Ice;
						break;
					case (int)TypeIDs.Gamboge_Cytoserocin:
					case (int)TypeIDs.Chartreuse_Cytoserocin:
						cachedMission.MiningMissionType = MiningMissionTypes.Gas;
						break;
				}
			}

            //Set the agentID of the mission too
            cachedMission.AgentId = agentMission.AgentID;
            //And its name
            cachedMission.Name = agentMission.Name;
        	cachedMission.Expires = agentMission.Expires;
            cachedMission.ExpirationTime = agentMission.ExpirationTime.AsInt64;

            //Parse rat types for Worlds Collide...
            if (cachedMission.Name.Contains("Worlds Collide"))
            {
                if (detailsString.Contains("Serpentis Corporation"))
                {
                    cachedMission.ParsedRatTypes = new List<string> {"Serpentis", "Guristas"};
                    LogMessage(methodName, LogSeverityTypes.Debug, "Detected Serpentis/Guristas Worlds Collide");
                }
                else if (detailsString.Contains("Sansha"))
                {
                    cachedMission.ParsedRatTypes = new List<string> {"Angel", "Sansha"};
                    LogMessage(methodName, LogSeverityTypes.Debug, "Detected Angel/Sansha Worlds Collide");
                }
            }

            //Try to parse the factionID and set rat resistances if possible
            if (cachedMission.FactionId != 0)
            {
                var ratType = string.Empty;
                switch (cachedMission.FactionId)
                {
                    case (int)FactionIDs.Amarr_Empire:
                    case (int)FactionIDs.Sanshas_Nation:
                        ratType = "Sansha";
                        break;
                    case (int)FactionIDs.The_Syndicate:
                    case (int)FactionIDs.Serpentis:
                    case (int)FactionIDs.Gallente_Federation:
                        ratType = "Serpentis";
                        break;
                    case (int)FactionIDs.Mordus_Legion_Command:
                    case (int)FactionIDs.Caldari_State:
                    case (int)FactionIDs.Guristas_Pirates:
                        ratType = "Guristas";
                        break;
                    case (int)FactionIDs.Khanid_Kingdom:
                    case (int)FactionIDs.Blood_Raider_Covenant:
                        ratType ="Blood";
                        break;
                    case (int)FactionIDs.Angel_Cartel:
                    case (int)FactionIDs.Minmatar_Republic:
                        ratType = "Angel";
                        break;
                    case (int)FactionIDs.CONCORD_Assembly:
                        ratType = "Concord";
                        break;
                }
                LogMessage(methodName, LogSeverityTypes.Debug, "Parsed rat type \"{0}\" from faction ID {1}.", ratType, cachedMission.FactionId);
                cachedMission.ParsedRatTypes.Add(ratType);
            }

            //Return the parsed object)
            return cachedMission;
        }

        private int GetIdFromDetailsByTag(string details, string tag)
        {
            var methodName = "GetIDFromDetailsByTag";
			LogTrace(methodName, "Tag: {0}", tag);

            //<img src="typeicon:2501" ...
            //Get the indexof the tag we're' looking for
            var index = details.IndexOf(tag);
            //Get the total index + size of the tag, thus the start of the part we want
            var indexAndSize = index + tag.Length;
            //Get the index of the " right after the part we want
            var secondIndex = details.IndexOf("\"", indexAndSize);
            //Using all of this, substring out the part we want!
            var tagSubstring = details.Substring(indexAndSize,
                secondIndex - indexAndSize);

			LogMessage(methodName, LogSeverityTypes.Debug, "indexAndSize: {0}, tagSubstring: {1}",
				indexAndSize, tagSubstring);
            return Int32.Parse(tagSubstring, CultureInfo.InvariantCulture);
        }

        private double GetItemVolumeFromDetails(string details)
        {
            var methodName = "GetItemVolumeFromDetails";
			LogTrace(methodName);

            //Group Of Marines (180.0 msup3,
            //Get the index of the msup3 tag
            var startIndex = details.IndexOf("msup3");
            //get the rough "starting place" index to search for ( with
            var previousIndex = startIndex - 10;
            //get the index of the (
            var index = details.IndexOf('(', previousIndex);
            //Get the ending index
            var endIndex = details.IndexOf(' ', index);
            //Build our substring!
            var volumeString = details.Substring(index + 1, endIndex - index - 1);

			LogMessage(methodName, LogSeverityTypes.Debug, "index: {0}, volumeString: {1}",
				index, volumeString);

            return double.Parse(volumeString.Replace(',', '.'), CultureInfo.InvariantCulture);
        }

        private bool IsMissionInDangerousSpace(string details)
        {
            var methodName = "IsMissionInDangerousSpace";
			LogTrace(methodName);

        	return Tags_LowSec.Any(details.Contains);
        }
        #endregion

        public CachedMission GetCachedMissionForAgentId(int agentId)
        {
            var methodName = "GetCachedMissionFromAgent";
			LogTrace(methodName, "AgentId: {0}", agentId);

            if (agentId <= 0)
                throw new ArgumentException("AgentId must be greater than 0.", "agentId");

            return _cachedMissions.FirstOrDefault(cachedMission => cachedMission.AgentId == agentId);
        }

        public AgentMission GetAgentMissionFromAgent(int agentId)
        {
            var methodName = "GetAgentMissionFromAgent";
			LogTrace(methodName, "AgentID: {0}", agentId);

            if (agentId <= 0)
                throw new ArgumentException("AgentId must be greater than 0.", "agentId");

            //Iterate and find the matching mission for our agentID
            foreach (var agentMission in StealthBot.MeCache.AgentMissions.Where(agentMission => agentMission.AgentID == agentId))
            {
            	return agentMission;
            }

			LogMessage(methodName, LogSeverityTypes.Standard, "Error; could not find agent mission for agent {0}. Make sure the journal is on the \"Missions\" tab.",
				agentId);
            return null;
        }

        public void ClearMissionFromAgent(int agentId)
        {
            var methodName = "ClearMissionFromAgent";
			LogTrace(methodName, "AgentID: {0}", agentId);

            if (agentId <= 0)
                throw new ArgumentException("AgentId must be greater than 0.", "agentId");

            for (var idx = 0; idx < _cachedMissions.Count; idx++)
            {
                //If it matches, remove it and break;
                if (_cachedMissions[idx].AgentId != agentId) 
					continue;

                _cachedMissions.Remove(_cachedMissions[idx]);
                LogMessage(methodName, LogSeverityTypes.Debug, "Removing cached mission from agent with ID {0}.", agentId);
            	idx--;
            }
        }

        #region Mission and Bookmark lookups for CachedMissions
        public AgentMission GetAgentMission(CachedMission cachedMission)
        {
            var methodName = "ToAgentMission";
            StealthBot.Logging.LogTrace(ModuleName, methodName);

            //Iterate a list of AgentMissions and look for the matching one.

            if (StealthBot.MeCache.AgentMissions.Count == 0)
            {
                StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Standard, "Error; GetAgentMissions returned no AgentMissions!");
                return null;
            }

            foreach (var agentMission in StealthBot.MeCache.AgentMissions)
            {
                if (LavishScriptObject.IsNullOrInvalid(agentMission))
                {
                    StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Standard, "Error: GetAgentMissions returned an invalid AgentMission!");
                    continue;
                }

                if (agentMission.AgentID == cachedMission.AgentId)
                {
                    return agentMission;
                }
            }

            //no matching one, return null
            return null;
        }

        public List<BookMark> GetMissionBookmarks(CachedMission cachedMission)
        {
            var methodName = "GetMissionBookmarks";
            StealthBot.Logging.LogTrace(ModuleName, methodName);

            if (_missionBookMarksByMission.ContainsKey(cachedMission))
            {
                var cachedMissionBookmarks = _missionBookMarksByMission[cachedMission];

                if (cachedMissionBookmarks.All(missionBookmark => !LavishScriptObject.IsNullOrInvalid(missionBookmark)))
                    return cachedMissionBookmarks;
            }

            //If we have no bookmarks or they're invalid, we need to re-get them
            var agentMission = GetAgentMission(cachedMission);
            if (agentMission == null)
            {
                StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Debug, "Error: Could not find AgentMission for CachedMission \"{0}\" for agent with ID {1}.",
                    cachedMission.Name, cachedMission.AgentId);
                return new List<BookMark>();
            }

            var missionBookMarks = agentMission.GetBookmarks();
            if (missionBookMarks == null)
            {
                StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Debug, "Error: AgentMission.GetBookmarks returned null.");
                missionBookMarks = new List<BookMark>();
            }

            //Cache this list to avoid extra work
            if (!_missionBookMarksByMission.ContainsKey(cachedMission))
            {
                _missionBookMarksByMission.Add(cachedMission, missionBookMarks);
            }
            else
            {
                _missionBookMarksByMission[cachedMission] = missionBookMarks;
            }

            return missionBookMarks;
        }

        public BookMark GetMissionStartBookmark(CachedMission cachedMission)
        {
            var methodName = "GetMissionStartBookmark";
            LogTrace(methodName);

            if (_missionStartBookMarkByMission.ContainsKey(cachedMission))
            {
                var bookMark = _missionStartBookMarkByMission[cachedMission];

                if (!LavishScriptObject.IsNullOrInvalid(bookMark))
                    return bookMark;
            }

            //For different mission types we're looking for different tags.
            BookMark missionStartBookmark = null;
            var missionBookmarks = GetMissionBookmarks(cachedMission);
            var missionType = cachedMission.Type;
            foreach (var bookmark in missionBookmarks)
            {
                if (missionType.Contains(Type_Courier))
                {
                    if (bookmark.LocationType.Contains(Tag_ObjectiveSource))
                    {
                        missionStartBookmark = bookmark;
                        break;
                    }
                }
                else if (missionType.Contains(Type_Mining) || missionType.Contains(Type_Encounter))
                {
                    if (bookmark.LocationType.Contains(Tag_Dungeon))
                    {
                        missionStartBookmark = bookmark;
                        break;
                    }
                }
            }

            if (missionStartBookmark == null)
            {
                LogMessage(methodName, LogSeverityTypes.Debug, "Error: Could not find mission start bookmark for mission \"{0}\" (Type <{1}>, AgentId <{2}>).",
                    cachedMission.Name, missionType, cachedMission.AgentId);
                missionBookmarks.ForEach(DumpMissionBookMark);
                return null;
            }

            if (_missionStartBookMarkByMission.ContainsKey(cachedMission))
            {
                _missionStartBookMarkByMission[cachedMission] = missionStartBookmark;
            }
            else
            {
                _missionStartBookMarkByMission.Add(cachedMission, missionStartBookmark);
            }

            return missionStartBookmark;
        }

        public BookMark GetMissionEndBookmark(CachedMission cachedMission)
        {
            var methodName = "GetMissionEndBookmark";
            LogTrace(methodName);

            if (_missionEndBookMarkByMission.ContainsKey(cachedMission))
            {
                var missionBookMark = _missionEndBookMarkByMission[cachedMission];

                if (!LavishScriptObject.IsNullOrInvalid(missionBookMark))
                    return missionBookMark;
            }

            BookMark missionEndBookmark = null;
            //Look for different tags for differnt missions
            var missionBookmarks = GetMissionBookmarks(cachedMission);
            var missionType = cachedMission.Type;
            foreach (var bookmark in missionBookmarks)
            {
                if (missionType.Contains(Type_Courier))
                {
                    if (bookmark.LocationType.Contains(Tag_ObjectiveDestination))
                    {
                        missionEndBookmark = bookmark;
                        break;
                    }
                }
                else if (missionType.Contains(Type_Mining))
                {
                    if (bookmark.LocationType.Contains(Tag_Objective))
                    {
                        missionEndBookmark = bookmark;
                        break;
                    }
                }
                else if (missionType.Contains(Type_Encounter))
                {
                    if (bookmark.LocationType.Contains(Tag_AgentHomeBase) ||
                        bookmark.LocationType.Contains(Tag_Objective))
                    {
                        missionEndBookmark = bookmark;
                        break;
                    }
                }
            }

            if (missionEndBookmark == null)
            {
                LogMessage(methodName, LogSeverityTypes.Debug, "Error: Could not find mission end bookmark for mission \"{0}\" (Type <{1}>, AgentId <{2}>).",
                    cachedMission.Name, missionType, cachedMission.AgentId);
                missionBookmarks.ForEach(DumpMissionBookMark);
                return null;
            }

            if (_missionEndBookMarkByMission.ContainsKey(cachedMission))
            {
                _missionEndBookMarkByMission[cachedMission] = missionEndBookmark;
            }
            else
            {
                _missionEndBookMarkByMission.Add(cachedMission, missionEndBookmark);
            }

            return missionEndBookmark;
        }

        private void DumpMissionBookMark(BookMark bookmark)
        {
            var methodName = "DumpMissionBookMark";
            LogTrace(methodName);

            LogMessage(methodName, LogSeverityTypes.Standard, "Mission bookmark: Label {0}, ItemID {1}, Type {2}, LocationType {3}",
                bookmark.Label, bookmark.ItemID, bookmark.Type, bookmark.LocationType);
        }

        public BookMark GetBookmarkMatchingTag(CachedMission cachedMission, string tagString)
        {
            var methodName = "GetBookMarkMatchingTag";
            LogTrace(methodName);

            return GetMissionBookmarks(cachedMission).FirstOrDefault(bookmark => bookmark.LocationType.Contains(tagString));
        }

        public bool IsMissionAcceptible(CachedMission cachedMission)
        {
            var methodName = "CheckMission";
            LogTrace(ModuleName, methodName);

            //make sure the mission isn't blacklisted
            var blacklistMatch = StealthBot.Config.MissionConfig.MissionBlacklist.FirstOrDefault(missionName => cachedMission.Name.Contains(missionName, StringComparison.InvariantCultureIgnoreCase));
            if (blacklistMatch != null)
            {
                StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Debug, "Mission \"{0}\" matches blacklisted name \"{1}\".",
                    cachedMission.Name, blacklistMatch);
                return false;
            }

            var avoidLowSec = StealthBot.Config.MissionConfig.AvoidLowSec;
            if ((!avoidLowSec || !cachedMission.IsLowSecurity) && cachedMission.HaveRoute)
            {
                //See if we want this type of mission
                if ((StealthBot.Config.MissionConfig.RunCourierMissions && cachedMission.Type.Contains(Type_Courier)) ||	//Check if we can run courier missions
                    CheckEncounterMission(cachedMission) ||																//Check if we can run encounter missions
                    (StealthBot.Config.MissionConfig.RunTradeMissions && cachedMission.Type.Contains(Type_Trade)) ||		//Check if we can run trade missions
                    CheckMiningMission(cachedMission) ||																//Check if we can run mining missions
                    (StealthBot.Config.MissionConfig.DoChainCouriers && cachedMission.Type.Equals(Type_ChainCourier)))	//Check if we can run storyline chain courier missions
                {
                    StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Debug, "Mission \"{0}\" is acceptible.",
                        cachedMission.Name);
                    return true;
                }
            }

            var missionAgent = StealthBot.AgentCache.GetCachedAgent(cachedMission.AgentId);
            StealthBot.Logging.LogMessage(ModuleName, methodName, LogSeverityTypes.Debug, "Mission \"{0}\" for agent \"{1}\" ({2}) was not acceptible.",
                cachedMission.Name, missionAgent.Name, missionAgent.Id);
            return false;
        }

        private bool CheckMiningMission(CachedMission cachedMission)
        {
            return (StealthBot.Config.MissionConfig.RunMiningMissions && cachedMission.Type.Contains("Mining") &&
                ((StealthBot.Config.MissionConfig.DoOreMiningMissions && cachedMission.MiningMissionType == MiningMissionTypes.Ore) ||
                (StealthBot.Config.MissionConfig.DoIceMiningMissions && cachedMission.MiningMissionType == MiningMissionTypes.Ice) ||
                (StealthBot.Config.MissionConfig.DoGasMiningMissions && cachedMission.MiningMissionType == MiningMissionTypes.Gas)));
        }

        private bool CheckEncounterMission(CachedMission cachedMission)
        {
            if (StealthBot.Config.MissionConfig.RunEncounterMissions && cachedMission.Type.Contains(Type_Encounter))
            {
                switch (cachedMission.FactionId)
                {
                    case (int)FactionIDs.Amarr_Empire:
                    case (int)FactionIDs.Ammatar_Mandate:
                    case (int)FactionIDs.Caldari_State:
                    case (int)FactionIDs.CONCORD_Assembly:
                    case (int)FactionIDs.Gallente_Federation:
                    case (int)FactionIDs.Khanid_Kingdom:
                    case (int)FactionIDs.Minmatar_Republic:
                    case (int)FactionIDs.Servant_Sisters_of_Eve:
                        return StealthBot.Config.MissionConfig.DoEmpireKillMissions;
                    case (int)FactionIDs.Angel_Cartel:
                    case (int)FactionIDs.Blood_Raider_Covenant:
                    case (int)FactionIDs.Guristas_Pirates:
                    case (int)FactionIDs.Mordus_Legion_Command:
                    case (int)FactionIDs.Sanshas_Nation:
                    case (int)FactionIDs.Serpentis:
                    case (int)FactionIDs.The_Syndicate:
                    case (int)FactionIDs.Thukker_Tribe:
                    case (int)FactionIDs.Unknown:
                        return StealthBot.Config.MissionConfig.DoPirateKillMissions;
                    default:
                        //Probalby drones
                        //if the mission is a known empire kill mission...
                        var mission = StealthBot.MissionDatabase.GetMissionByName(cachedMission.Name);
                        if (mission != null && mission.IsEmpireKill)
                        {
                            return StealthBot.Config.MissionConfig.DoEmpireKillMissions;
                        }
                        return true;
                }
            }
            return false;
        }

        public bool IsStorylineMission(string type)
        {
            return type.Contains(Type_Storyline, StringComparison.InvariantCultureIgnoreCase);
        }

        public bool IsAtMissionStartBookmark(CachedMission cachedMission)
        {
            var methodName = "IsAtMissionStartBookmark";
            LogTrace(methodName);

            //Get the start bookmark
            var missionStartBookMark = StealthBot.MissionCache.GetMissionStartBookmark(cachedMission);

            if (missionStartBookMark == null)
            {
                LogMessage(methodName, LogSeverityTypes.Standard, "Error: Could not find mission start bookmark!");
                return true;
            }

            //If the bookmark is a station and I'm not docked in it, I'm not there
            if (StealthBot.Bookmarks.IsStationBookMark(missionStartBookMark))
            {
                if (StealthBot.MeCache.InSpace || StealthBot.MeCache.StationId != missionStartBookMark.ItemID)
                {
                    return false;
                }
            }
            else
            {
                if (!StealthBot.MeCache.InSpace)
                    return false;

                if (DistanceTo(missionStartBookMark.X, missionStartBookMark.Y, missionStartBookMark.Z) >= (int)Ranges.Warp)
                {
                    //We can come out of warp out of range of the bookmark but right on top of an acceleration gate -
                    //if this happens we're as close to the bookmark as we can get - "natural phenomenon" error -
                    //just dequeue, we have to use the gate and mission processor will handle that.

                    return StealthBot.EntityProvider.EntityWrappers.Any(x => x.GroupID == (int)GroupIDs.WarpGate || x.TypeID == (int)TypeIDs.Beacon);
                }
            }

            return true;
        }

        public bool IsAtMissionEndBookmark(CachedMission cachedMission)
        {
            var methodName = "IsAtMissionEndBookmark";
            LogTrace(methodName);

            //Get the end bookmark
            var missionEndBookmark = StealthBot.MissionCache.GetMissionEndBookmark(cachedMission);

            if (missionEndBookmark == null)
            {
                LogMessage(methodName, LogSeverityTypes.Standard, "Error: Could not find mission end bookmark.");
                return true;
            }

            //If the bookmark is a station and I'm not docked in it, I'm not there
            if (StealthBot.Bookmarks.IsStationBookMark(missionEndBookmark))
            {
                if (StealthBot.MeCache.InSpace || StealthBot.MeCache.StationId != missionEndBookmark.ItemID)
                {
                    return false;
                }
            }
            else
            {
                if (!StealthBot.MeCache.InSpace)
                    return false;

                if (DistanceTo(missionEndBookmark.X, missionEndBookmark.Y, missionEndBookmark.Z) >= (int)Ranges.Warp)
                {
                    return false;
                }
            }

            return true;
        }
        #endregion
    }
    // ReSharper restore StringIndexOfIsCultureSpecific.1
    // ReSharper restore StringIndexOfIsCultureSpecific.2
    // ReSharper restore ConvertToConstant.Local
}
